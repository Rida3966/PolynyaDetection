# -*- coding: utf-8 -*-
"""MultiResUnet_func_block.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oLmbKoiU6vVL-e4dmRZPGjtxbHZoT6VI
"""

# Commented out IPython magic to ensure Python compatibility.
# Required Packages

# %tensorflow_version 2.1.0

# Importing Libraries

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, Concatenate, Conv2DTranspose, BatchNormalization, Dropout, Activation

"""**MultiRes Unet Architecture**"""

# Convolutional Block

def conv_block(x, num_filters, kernel_size, padding="same", act=True):
    x = Conv2D(num_filters, kernel_size, padding=padding, use_bias=False)(x)
    x = BatchNormalization()(x)
    if act:
        x = Activation("relu")(x)
    return x

# MultiRes Block comprised of multiple Convolutional Blocks 

def multires_block(x, num_filters, alpha=1.67):
  
    W = num_filters * alpha

    x0 = x
    x1 = conv_block(x0, int(W*0.167), 3)
    x2 = conv_block(x1, int(W*0.333), 3)
    x3 = conv_block(x2, int(W*0.5), 3)
    xc = Concatenate()([x1, x2, x3])
    xc = BatchNormalization()(xc)

    nf = int(W*0.167) + int(W*0.333) + int(W*0.5)
    sc = conv_block(x0, nf, 1, act=False)

    x = Activation("relu")(xc + sc)
    x = BatchNormalization()(x)

    return x

# Bridge between Encoder and Decoder Blocks

def res_path(x, num_filters, length):

    for i in range(length):
      
        x0 = x
        x1 = conv_block(x0, num_filters, 3, act=False)
        sc = conv_block(x0, num_filters, 1, act=False)
        x = Activation("relu")(x1 + sc)
        x = BatchNormalization()(x)

    return x

# Encoder Block for MultiRes-Unet

def encoder_block(x, num_filters, length):

    x = multires_block(x, num_filters)
    s = res_path(x, num_filters, length)
    p = MaxPooling2D((2, 2))(x)
    
    return s, p

# Decoder Block for MultiRes-Unet

def decoder_block(x, skip, num_filters):

    x = Conv2DTranspose(num_filters, 2, strides=2, padding="same")(x)
    x = Concatenate()([x, skip])
    x = multires_block(x, num_filters)
    
    return x

# MultiRes Unet Architecture using designed Encoder and Decoder Blocks

def build_multiresunet(shape):

    # Input 
    inputs = Input(shape)
    
    # Encoder
    p0 = inputs
    s1, p1 = encoder_block(p0, 32, 4)
    s2, p2 = encoder_block(p1, 64, 3)
    s3, p3 = encoder_block(p2, 128, 2)
    s4, p4 = encoder_block(p3, 256, 1)

    # Bridge 
    b1 = multires_block(p4, 512)

    # Decoder 
    d1 = decoder_block(b1, s4, 256)
    d2 = decoder_block(d1, s3, 128)
    d3 = decoder_block(d2, s2, 64)
    d4 = decoder_block(d3, s1, 32)

    # Output 
    outputs = Conv2D(1, 1, padding="same", activation="sigmoid")(d4)

    # Model 
    model = Model(inputs, outputs, name="MultiResUNET")

    return model