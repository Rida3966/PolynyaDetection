# -*- coding: utf-8 -*-
"""UNET_func_block.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eOnweUTdClYNqlQEQFOgHc4YgskRElGi
"""



# Importing Libraries

from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, Concatenate, Conv2DTranspose, BatchNormalization, Dropout, Activation

"""**Custom UNET Architecture and Autoencoders**"""

# Drop Out Function for Convolutional Block 

def drop_out(input, val):
    x = Dropout(val)(input)

    return x

# Convolutional Block

def conv_block(input, num_filters):
    x = Conv2D(num_filters, (3,3), padding="same")(input)
    x = BatchNormalization()(x)   
    x = Activation("relu")(x)

    #x = drop_out(x, val)          Optional: Not incorporating drop out as model doesn't seem to improve performance

    x = Conv2D(num_filters, (3,3), padding="same")(x)
    x = BatchNormalization()(x)  
    x = Activation("relu")(x)

    return x

# Encoder Block same for Unet and Autoencoder

def encoder_block(input, num_filters):

    x = conv_block(input, num_filters)
    p = MaxPooling2D((2, 2))(x)

    return x, p

# Building Encoder for Autoencoder

def build_encoder(input_image):

    s1, p1 = encoder_block(input_image, 64)
    s2, p2 = encoder_block(p1, 128)
    s3, p3 = encoder_block(p2, 256)
    s4, p4 = encoder_block(p3, 512)
    
    encoded = conv_block(p4, 1024) #Bridge

    return encoded

# Decoder block for autoencoder (no skip connections)

def decoder_block(input, num_filters):

    x = Conv2DTranspose(num_filters, (2, 2), strides=2, padding="same")(input)
    x = conv_block(x, num_filters)
    
    return x

# Building Decoder for Autoencoder. 

def build_decoder(encoded):
    d1 = decoder_block(encoded, 512)
    d2 = decoder_block(d1, 256)
    d3 = decoder_block(d2, 128)
    d4 = decoder_block(d3, 64)
    
    decoded = Conv2D(3, 3, padding="same", activation="sigmoid")(d4)

    return decoded

#Use encoder and decoder blocks to build the autoencoder. 

def build_autoencoder(input_shape):

    input_img = Input(shape=input_shape)
    autoencoder = Model(input_img, build_decoder(build_encoder(input_img)))
    return(autoencoder)

# Decoder Block for UNET

def decoder_block_unet(input, skip_features, num_filters):
  
    x = Conv2DTranspose(num_filters, (2, 2), strides=2, padding="same")(input)
    x = Concatenate()([x, skip_features])
    x = conv_block(x, num_filters)

    return x

#Build Unet using the encoder and decoder blocks for Unet

def build_unet(input_shape):
    inputs = Input(input_shape)

    s1, p1 = encoder_block(inputs, 64)
    s2, p2 = encoder_block(p1, 128)
    s3, p3 = encoder_block(p2, 256)
    s4, p4 = encoder_block(p3, 512)

    b1 = conv_block(p4, 1024) #Bridge

    d1 = decoder_block_unet(b1, s4, 512)
    d2 = decoder_block_unet(d1, s3, 256)
    d3 = decoder_block_unet(d2, s2, 128)
    d4 = decoder_block_unet(d3, s1, 64)

    outputs = Conv2D(1, 1, padding="same", activation="sigmoid")(d4)  

    model = Model(inputs, outputs, name="U-Net")

    return model